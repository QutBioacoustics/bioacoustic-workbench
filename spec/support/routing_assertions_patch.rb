#require 'uri'
#require 'active_support/core_ext/hash/diff'
#require 'active_support/core_ext/hash/indifferent_access'
#require 'action_controller/metal/exceptions'
#
#module ActionDispatch
#  module Assertions
#    # Suite of assertions to test routes generated by \Rails and the handling of requests made to them.
#    #########
#    #
#    #        BECAUSE RAILS TESTING IS SHIT, WE CAN'T SPECIFY A CUSTOM HTTP HEADER AND DO AN
#    #        assert_recognizes ON THE ROUTE TO TEST IT. SO I DECIDED TO PATCH THE OFFENDING METHOD!!!
#    #
#    #########
#    module RoutingAssertions
#
#      #def assert_recognizes(expected_options, path, extras={}, message=nil)
#      #  request = recognized_request_for(path)
#      #
#      #  expected_options = expected_options.clone
#      #  extras.each_key { |key| expected_options.delete key } unless extras.nil?
#      #
#      #  expected_options.stringify_keys!
#      #  msg = build_message(message, "The recognized options <?> did not match <?>, difference: <?>",
#      #                      request.path_parameters, expected_options, expected_options.diff(request.path_parameters))
#      #  assert_equal(expected_options, request.path_parameters, msg)
#      #end
#
#      private
#      # Recognizes the route for a given path.
#      def recognized_request_for(path)
#
#        accept = nil
#
#        if path.is_a?(Hash)
#          method = path[:method]
#
#          # support for accept header
#          accept = path[:accept]
#
#          path   = path[:path]
#
#        else
#          method = :get
#        end
#
#        # Assume given controller
#        request = ActionController::TestRequest.new
#
#        if path =~ %r{://}
#          begin
#            uri = URI.parse(path)
#            request.env["rack.url_scheme"] = uri.scheme || "http"
#            request.host = uri.host if uri.host
#            request.port = uri.port if uri.port
#            request.path = uri.path.to_s.empty? ? "/" : uri.path
#
#          rescue URI::InvalidURIError => e
#            raise ActionController::RoutingError, e.message
#          end
#        else
#          path = "/#{path}" unless path.first == "/"
#          request.path = path
#        end
#
#        request.request_method = method if method
#        request.accept = accept if accept
#
#        params = @routes.recognize_path(path, { :method => method })
#        request.path_parameters = params.with_indifferent_access
#
#        request
#      end
#    end
#  end
#end
